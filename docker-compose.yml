version: "3.9"

# Common networks:
# - homelab: primary shared network for most services
# - homelab_proxy: external reverse-proxy network (already created outside compose)
networks:
  homelab:
    driver: bridge
  homelab_proxy:
    driver: bridge

services:
  # ----------------------------
  # CORE SMART-HOME STACK
  # ----------------------------

  home-assistant:
    image: lscr.io/linuxserver/homeassistant:latest
    container_name: home-assistant
    volumes:
      - ./config/homeassistant:/config
      - ${MEDIA}:/media
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    restart: unless-stopped
    network_mode: host   # needs host networking for discovery/integrations

  mqtt:
    image: eclipse-mosquitto:latest
    container_name: mqtt
    restart: unless-stopped
    ports:
      - "1888:1883"  # external:internal (kept as you had it)
    volumes:
      - ./config/mosquitto/data:/mosquitto/data
      - ./config/mosquitto/log:/mosquitto/log
      - ./config/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - homelab

  zigbee2mqtt:
    image: koenkk/zigbee2mqtt
    container_name: zigbee2mqtt
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - ZIGBEE2MQTT_CONFIG_MQTT_SERVER=${MQTT_SERVER}
      - ZIGBEE2MQTT_CONFIG_MQTT_USER=${MQTT_USER}
      - ZIGBEE2MQTT_CONFIG_MQTT_PASSWORD=${MQTT_PASSWORD}
    volumes:
      - /run/udev:/run/udev:ro
      - ./config/zigbee2mqtt:/app/data
    devices:
      - ${ZIGBEE_ADAPTOR_PATH}:/dev/ttyUSB0
    networks:
      - homelab
      - homelab_proxy

  # ----------------------------
  # MONITORING & METRICS
  # ----------------------------

  uptime-kuma:
    image: louislam/uptime-kuma
    container_name: uptime-kuma
    volumes:
      - ./data/uptime-kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    networks:
      - homelab
      - homelab_proxy

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    user: "1000"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Tokyo
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - ./config/prometheus:/etc/prometheus
      - ./data/prometheus:/prometheus
    networks:
      - homelab
      - homelab_proxy

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    ports:
      - "8080:8080"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    command:
      - '-housekeeping_interval=30s'
      - '-docker_only=true'
      - '-store_container_labels=false'
      - '-disable_metrics=percpu,process,sched,tcp,udp,diskIO,disk,network'
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped
    networks:
      - homelab

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "1000"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Tokyo
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./data/grafana:/var/lib/grafana
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  glances:
    image: nicolargo/glances:latest-full
    container_name: glances
    restart: unless-stopped
    pid: host
    environment:
      - GLANCES_OPT=-w --disable-check-update
      - TZ=${TZ}
    volumes:
      - /:/host:ro
      - /mnt/media:/mnt/media:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - homelab
      - homelab_proxy

  # ----------------------------
  # VPN (NORDLYNX) + MEDIA DOWNLOADS VIA VPN
  # ----------------------------

  nordlynx:
    image: ghcr.io/bubuntux/nordlynx
    container_name: nordlynx
    cap_add:
      - NET_ADMIN
    environment:
      - PRIVATE_KEY=${NORDVPN_PRIVATE_KEY}
      - NET_LOCAL=${LOCAL_NETWORK}   # e.g., 192.168.0.0/16
    # Publish ports for any services sharing this network namespace (below)
    ports:
      - "51413:51413"
      - "51413:51413/udp"
      - "9091:9091"   # Transmission Web UI
      - "9696:9696"   # Prowlarr Web UI
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # - TRANSMISSION_WEB_HOME=/flood-for-transmission/ #optional
    volumes:
      - ./config/transmission:/config
      - ${DOWNLOADS}:/downloads
      - ${WATCH}:/watch
    # Route ALL traffic through VPN by sharing network namespace
    network_mode: service:nordlynx
    depends_on:
      - nordlynx
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "ping", "-c", "1", "google.com" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 10s

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:prowlarr
      - TP_THEME=overseerr
    volumes:
      - ./config/prowlarr:/config
    # Route ALL traffic through VPN by sharing network namespace
    network_mode: service:nordlynx
    depends_on:
      - nordlynx
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "ping", "-c", "1", "google.com" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 10s

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
      - TP_THEME=overseerr
    volumes:
      - ./config/sonarr:/config
      - ${TV}:/tv
      - ${DOWNLOADS}:/downloads
    depends_on:
      - prowlarr
      - transmission
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    hostname: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr
      - TP_THEME=overseerr
    volumes:
      - ./config/radarr:/config
      - ${MOVIES}:/movies
      - ${DOWNLOADS}:/downloads
    depends_on:
      - prowlarr
      - transmission
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:bazarr
      - TP_THEME=overseerr
    volumes:
      - ./config/bazarr:/config
      - ${MOVIES}:/movies
      - ${TV}:/tv
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  # ----------------------------
  # MEDIA SERVING & DISCOVERY
  # ----------------------------

  plex:
    image: lscr.io/linuxserver/plex
    container_name: plex
    network_mode: host   # best for DLNA, HW accel, discovery
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - version=docker
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:plex
      - TP_THEME=overseerr
    volumes:
      - ./config/plex:/config
      - ${MEDIA}:/media
    restart: unless-stopped

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/overseerr:/config   # fixed path name
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  # ----------------------------
  # BOOKS / LIBRARY
  # ----------------------------

  calibre-web-automated:
    image: crocodilestick/calibre-web-automated:latest
    container_name: calibre-web-automated
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/calibre-web:/config
      - ${LIBRARY}:/calibre-library
      - ${BOOK_INGEST}:/cwa-book-ingest  # ingest dir; files removed after processing
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/readarr:/config
      - ${LIBRARY}:/books
      - ${DOWNLOADS}:/downloads
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  # ----------------------------
  # SYNC
  # ----------------------------

  syncthing:
    image: syncthing/syncthing
    container_name: syncthing
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "22000:22000/tcp"  # sync
      - "22000:22000/udp"
      - "21027:21027/udp"  # discovery
      # GUI (8384) can be proxied on homelab_proxy; publish if you need host access:
      # - "8384:8384"
    volumes:
      - ./config/syncthing:/var/syncthing/config
      - ${SAVES}:/var/syncthing/data
    networks:
      - homelab
      - homelab_proxy

  # ----------------------------
  # UTILS
  # ----------------------------

  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "8191:8191"
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy


    # portal to access all other web UI
  homepage:
    container_name: homepage
    restart: unless-stopped
    image: ghcr.io/gethomepage/homepage:latest
    volumes:
      - ./config/homepage:/app/config
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - HOMEPAGE_ALLOWED_HOSTS=homepage.antoineglacet.com
    networks:
      - homelab
      - homelab_proxy

  # refresh dynamic IP to cloudflare DNS
  ddclient:
    image: lscr.io/linuxserver/ddclient:latest
    container_name: ddclient
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DDCLIENT_CLOUDFLARE_TOKEN=${DDCLIENT_CLOUDFLARE_TOKEN}
    volumes:
      - ./config/ddclient:/config
    restart: unless-stopped
    networks:
      - homelab

  # share files with Windows
  samba:
    container_name: samba
    image: dperson/samba
    volumes:
      - ${DATA}:/data
    environment:
      - USERID=${PUID}
      - GROUPID=${PGID}
      - TZ=${TZ}
    ports:
      - "137:137/udp"
      - "138:138/udp"
      - "139:139/tcp"
      - "445:445/tcp"
    command: >
      samba.sh
        -w "WORKGROUP"
        -s "data;/data;yes;no;no;all"
        -u "${SAMBA_USER};${SAMBA_PASSWORD}"
        -p
        -n
    restart: unless-stopped

  # Ad-blocking DNS server
  adguard:
    container_name: adguard
    image: adguard/adguardhome
    volumes:
      - ./config/adguard/work:/opt/adguardhome/work
      - ./config/adguard/conf:/opt/adguardhome/conf
      - ${CERT}:/cert
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 67:67/udp
      - 853:853/tcp
    depends_on:
      - swag
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  # Contaiers management UI
  portainer-ce:
    container_name: portainer
    image: portainer/portainer-ce
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/portainer:/data
    ports:
      - 8000:8000 # Agent
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  # backup
  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/duplicati:/config
      - ${BACKUP}:/backups
      - ${HOMESERVER}:/source
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  # Reverse DNS, nginx & certificates 
  swag:
    image: lscr.io/linuxserver/swag
    container_name: swag
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - URL=antoineglacet.com
      - SUBDOMAINS=wildcard
      - VALIDATION=dns
      - DNSPLUGIN=cloudflare
      # - EXTRA_DOMAINS=handbook.kanku.dev
    volumes:
      - ./config/swag:/config
    extra_hosts:
      - "home-assistant:host-gateway"
      - "plex:host-gateway"
    ports:
      - 443:443
      # - 80:80 for http validation only
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  # Authentification
  authelia:
    image: ghcr.io/authelia/authelia:latest
    container_name: authelia
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - AUTHELIA_JWT_SECRET=${AUTHELIA_JWT_SECRET}
      - AUTHELIA_SESSION_SECRET=${AUTHELIA_SESSION_SECRET}
      - AUTHELIA_STORAGE_ENCRYPTION_KEY=${AUTHELIA_STORAGE_ENCRYPTION_KEY}
      - AUTHELIA_SMTP_PASSWORD=${AUTHELIA_SMTP_PASSWORD}
    volumes:
      - ./config/authelia:/config
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  # Restart containers based on health
  autoheal:
    image: willfarrell/autoheal
    container_name: autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      # docker socket, be careful with this
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
