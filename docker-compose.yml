version: "3.9"

# Common networks:
# - homelab: primary shared network for most services
# - homelab_proxy: external reverse-proxy network (already created outside compose)
networks:
  homelab:
    driver: bridge
  homelab_proxy:
    driver: bridge

services:
  # ----------------------------
  # CORE SMART-HOME STACK
  # ----------------------------

  home-assistant:
    image: lscr.io/linuxserver/homeassistant:latest
    container_name: home-assistant
    volumes:
      - ./config/homeassistant:/config
      - ${MEDIA}:/media
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    restart: unless-stopped
    network_mode: host   # needs host networking for discovery/integrations
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homeassistant.rule=Host(`homeassistant.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.homeassistant.entrypoints=websecure"
      - "traefik.http.routers.homeassistant.tls.certresolver=cloudflare"
      - "traefik.http.routers.homeassistant.middlewares=authelia@docker"
      - "traefik.http.services.homeassistant.loadbalancer.server.port=8123"

  mqtt:
    image: eclipse-mosquitto:latest
    container_name: mqtt
    restart: unless-stopped
    ports:
      - "1888:1883"  # external:internal (kept as you had it)
    volumes:
      - ./config/mosquitto/data:/mosquitto/data
      - ./config/mosquitto/log:/mosquitto/log
      - ./config/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    networks:
      - homelab

  zigbee2mqtt:
    image: koenkk/zigbee2mqtt
    container_name: zigbee2mqtt
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - ZIGBEE2MQTT_CONFIG_MQTT_SERVER=${MQTT_SERVER}
      - ZIGBEE2MQTT_CONFIG_MQTT_USER=${MQTT_USER}
      - ZIGBEE2MQTT_CONFIG_MQTT_PASSWORD=${MQTT_PASSWORD}
    volumes:
      - /run/udev:/run/udev:ro
      - ./config/zigbee2mqtt:/app/data
    devices:
      - ${ZIGBEE_ADAPTOR_PATH}:/dev/ttyUSB0
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.zigbee2mqtt.rule=Host(`zigbee2mqtt.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.zigbee2mqtt.entrypoints=websecure"
      - "traefik.http.routers.zigbee2mqtt.tls.certresolver=cloudflare"
      - "traefik.http.routers.zigbee2mqtt.middlewares=authelia@docker"
      - "traefik.http.services.zigbee2mqtt.loadbalancer.server.port=8099"

  # ----------------------------
  # MONITORING & METRICS
  # ----------------------------

  uptime-kuma:
    image: louislam/uptime-kuma
    container_name: uptime-kuma
    volumes:
      - ./data/uptime-kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.uptime-kuma.rule=Host(`uptime-kuma.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.uptime-kuma.entrypoints=websecure"
      - "traefik.http.routers.uptime-kuma.tls.certresolver=cloudflare"
      - "traefik.http.routers.uptime-kuma.middlewares=authelia@docker"
      - "traefik.http.services.uptime-kuma.loadbalancer.server.port=3001"

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    user: "1000"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Tokyo
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - ./config/prometheus:/etc/prometheus
      - ./data/prometheus:/prometheus
    networks:
      - homelab
      - homelab_proxy

  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    ports:
      - "8080:8080"
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    command:
      - '-housekeeping_interval=30s'
      - '-docker_only=true'
      - '-store_container_labels=false'
      - '-disable_metrics=percpu,process,sched,tcp,udp,diskIO,disk,network'
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped
    networks:
      - homelab

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "1000"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Asia/Tokyo
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./data/grafana:/var/lib/grafana
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=cloudflare"
      - "traefik.http.routers.grafana.middlewares=authelia@docker"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  glances:
    image: nicolargo/glances:latest-full
    container_name: glances
    restart: unless-stopped
    pid: host
    environment:
      - GLANCES_OPT=-w --disable-check-update
      - TZ=${TZ}
    volumes:
      - /:/host:ro
      - /mnt/media:/mnt/media:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.glances.rule=Host(`glances.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.glances.entrypoints=websecure"
      - "traefik.http.routers.glances.tls.certresolver=cloudflare"
      - "traefik.http.routers.glances.middlewares=authelia@docker"
      - "traefik.http.services.glances.loadbalancer.server.port=61208"

  # ----------------------------
  # VPN (NORDLYNX) + MEDIA DOWNLOADS VIA VPN
  # ----------------------------

  nordlynx:
    image: ghcr.io/bubuntux/nordlynx
    container_name: nordlynx
    cap_add:
      - NET_ADMIN
    environment:
      - PRIVATE_KEY=${NORDVPN_PRIVATE_KEY}
      - NET_LOCAL=${LOCAL_NETWORK}   # e.g., 192.168.0.0/16
    # Publish ports for any services sharing this network namespace (below)
    ports:
      - "51413:51413"
      - "51413:51413/udp"
      - "9091:9091"   # Transmission Web UI
      - "9696:9696"   # Prowlarr Web UI
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.transmission.rule=Host(`transmission.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.transmission.entrypoints=websecure"
      - "traefik.http.routers.transmission.service=transmission"
      - "traefik.http.routers.transmission.tls.certresolver=cloudflare"
      - "traefik.http.routers.transmission.middlewares=authelia@docker"
      - "traefik.http.services.transmission.loadbalancer.server.port=9091"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.prowlarr.entrypoints=websecure"
      - "traefik.http.routers.prowlarr.service=prowlarr"
      - "traefik.http.routers.prowlarr.tls.certresolver=cloudflare"
      - "traefik.http.routers.prowlarr.middlewares=authelia@docker"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # - TRANSMISSION_WEB_HOME=/flood-for-transmission/ #optional
    volumes:
      - ./config/transmission:/config
      - ${DOWNLOADS}:/downloads
      - ${WATCH}:/watch
    # Route ALL traffic through VPN by sharing network namespace
    network_mode: service:nordlynx
    depends_on:
      - nordlynx
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "ping", "-c", "1", "google.com" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 10s

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:prowlarr
      - TP_THEME=overseerr
    volumes:
      - ./config/prowlarr:/config
    # Route ALL traffic through VPN by sharing network namespace
    network_mode: service:nordlynx
    depends_on:
      - nordlynx
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "ping", "-c", "1", "google.com" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 10s

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:sonarr
      - TP_THEME=overseerr
    volumes:
      - ./config/sonarr:/config
      - ${TV}:/tv
      - ${DOWNLOADS}:/downloads
    depends_on:
      - prowlarr
      - transmission
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.tls.certresolver=cloudflare"
      - "traefik.http.routers.sonarr.middlewares=authelia@docker"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    hostname: radarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:radarr
      - TP_THEME=overseerr
    volumes:
      - ./config/radarr:/config
      - ${MOVIES}:/movies
      - ${DOWNLOADS}:/downloads
    depends_on:
      - prowlarr
      - transmission
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.tls.certresolver=cloudflare"
      - "traefik.http.routers.radarr.middlewares=authelia@docker"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:bazarr
      - TP_THEME=overseerr
    volumes:
      - ./config/bazarr:/config
      - ${MOVIES}:/movies
      - ${TV}:/tv
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.bazarr.entrypoints=websecure"
      - "traefik.http.routers.bazarr.tls.certresolver=cloudflare"
      - "traefik.http.routers.bazarr.middlewares=authelia@docker"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"

  # ----------------------------
  # MEDIA SERVING & DISCOVERY
  # ----------------------------

  plex:
    image: lscr.io/linuxserver/plex
    container_name: plex
    network_mode: host   # best for DLNA, HW accel, discovery
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - version=docker
      - DOCKER_MODS=ghcr.io/gilbn/theme.park:plex
      - TP_THEME=overseerr
    volumes:
      - ./config/plex:/config
      - ${MEDIA}:/media
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.rule=Host(`plex.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.tls.certresolver=cloudflare"
      - "traefik.http.routers.plex.middlewares=authelia@docker"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"

  overseerr:
    image: lscr.io/linuxserver/overseerr:latest
    container_name: overseerr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/overseerr:/config   # fixed path name
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.overseerr.rule=Host(`overseerr.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.overseerr.entrypoints=websecure"
      - "traefik.http.routers.overseerr.tls.certresolver=cloudflare"
      - "traefik.http.routers.overseerr.middlewares=authelia@docker"
      - "traefik.http.services.overseerr.loadbalancer.server.port=5055"

  # ----------------------------
  # BOOKS / LIBRARY
  # ----------------------------

  calibre-web-automated:
    image: crocodilestick/calibre-web-automated:latest
    container_name: calibre-web-automated
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/calibre-web:/config
      - ${LIBRARY}:/calibre-library
      - ${BOOK_INGEST}:/cwa-book-ingest  # ingest dir; files removed after processing
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.calibre-web.rule=Host(`calibre-web.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.calibre-web.entrypoints=websecure"
      - "traefik.http.routers.calibre-web.tls.certresolver=cloudflare"
      - "traefik.http.routers.calibre-web.middlewares=authelia@docker"
      - "traefik.http.services.calibre-web.loadbalancer.server.port=8083"

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/readarr:/config
      - ${LIBRARY}:/books
      - ${DOWNLOADS}:/downloads
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy

  # ----------------------------
  # SYNC
  # ----------------------------

  syncthing:
    image: syncthing/syncthing
    container_name: syncthing
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "22000:22000/tcp"  # sync
      - "22000:22000/udp"
      - "21027:21027/udp"  # discovery
      # GUI (8384) can be proxied on homelab_proxy; publish if you need host access:
      # - "8384:8384"
    volumes:
      - ./config/syncthing:/var/syncthing/config
      - ${SAVES}:/var/syncthing/data
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.syncthing.rule=Host(`syncthing.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.syncthing.entrypoints=websecure"
      - "traefik.http.routers.syncthing.tls.certresolver=cloudflare"
      - "traefik.http.routers.syncthing.middlewares=authelia@docker"
      - "traefik.http.services.syncthing.loadbalancer.server.port=8384"

  # ----------------------------
  # APPFLOWY CLOUD
  # ----------------------------

  appflowy-postgres:
    image: pgvector/pgvector:pg16
    container_name: appflowy-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 12
    volumes:
      - ./data/appflowy/postgres:/var/lib/postgresql/data
    networks:
      - homelab

  appflowy-redis:
    image: redis:7
    container_name: appflowy-redis
    restart: unless-stopped
    command: [ "redis-server", "--save", "20", "1", "--loglevel", "warning" ]
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./data/appflowy/redis:/data
    networks:
      - homelab

  appflowy-minio:
    image: minio/minio
    container_name: appflowy-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_BROWSER_REDIRECT_URL=${APPFLOWY_PUBLIC_MINIO_CONSOLE_URL}
      - MINIO_ROOT_USER=${APPFLOWY_S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${APPFLOWY_S3_SECRET_KEY}
    volumes:
      - ./data/appflowy/minio:/data
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.appflowy-minio-console.rule=Host(`${APPFLOWY_DOMAIN}`) && PathPrefix(`/minio`)"
      - "traefik.http.routers.appflowy-minio-console.entrypoints=websecure"
      - "traefik.http.routers.appflowy-minio-console.tls.certresolver=cloudflare"
      - "traefik.http.routers.appflowy-minio-console.middlewares=appflowy-strip-minio@docker"
      - "traefik.http.services.appflowy-minio-console.loadbalancer.server.port=9001"
      - "traefik.http.routers.appflowy-minio-api.rule=Host(`${APPFLOWY_DOMAIN}`) && PathPrefix(`/minio-api`)"
      - "traefik.http.routers.appflowy-minio-api.entrypoints=websecure"
      - "traefik.http.routers.appflowy-minio-api.tls.certresolver=cloudflare"
      - "traefik.http.routers.appflowy-minio-api.middlewares=appflowy-strip-minio-api@docker,appflowy-minio-internal-host@docker"
      - "traefik.http.services.appflowy-minio-api.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.appflowy-strip-minio.stripprefix.prefixes=/minio"
      - "traefik.http.middlewares.appflowy-strip-minio-api.stripprefix.prefixes=/minio-api"
      - "traefik.http.middlewares.appflowy-minio-internal-host.headers.customrequestheaders.Host=appflowy-minio:9000"

  appflowy-gotrue:
    image: appflowyinc/gotrue:${GOTRUE_VERSION:-latest}
    container_name: appflowy-gotrue
    restart: unless-stopped
    depends_on:
      appflowy-postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:9999/health" ]
      interval: 5s
      timeout: 5s
      retries: 12
    environment:
      - GOTRUE_ADMIN_EMAIL=${GOTRUE_ADMIN_EMAIL}
      - GOTRUE_ADMIN_PASSWORD=${GOTRUE_ADMIN_PASSWORD}
      - GOTRUE_DISABLE_SIGNUP=${GOTRUE_DISABLE_SIGNUP}
      - GOTRUE_SITE_URL=appflowy-flutter://
      - GOTRUE_URI_ALLOW_LIST=**
      - GOTRUE_JWT_SECRET=${GOTRUE_JWT_SECRET}
      - GOTRUE_JWT_EXP=${GOTRUE_JWT_EXP}
      - GOTRUE_JWT_ADMIN_GROUP_NAME=supabase_admin
      - GOTRUE_DB_DRIVER=postgres
      - API_EXTERNAL_URL=${APPFLOWY_PUBLIC_GOTRUE_URL}
      - DATABASE_URL=${GOTRUE_DATABASE_URL}
      - GOTRUE_MAILER_AUTOCONFIRM=${GOTRUE_MAILER_AUTOCONFIRM}
      - GOTRUE_RATE_LIMIT_EMAIL_SENT=${GOTRUE_RATE_LIMIT_EMAIL_SENT}
      - GOTRUE_SMTP_HOST=${GOTRUE_SMTP_HOST}
      - GOTRUE_SMTP_PORT=${GOTRUE_SMTP_PORT}
      - GOTRUE_SMTP_USER=${GOTRUE_SMTP_USER}
      - GOTRUE_SMTP_PASS=${GOTRUE_SMTP_PASS}
      - GOTRUE_MAILER_URLPATHS_CONFIRMATION=/gotrue/verify
      - GOTRUE_MAILER_URLPATHS_INVITE=/gotrue/verify
      - GOTRUE_MAILER_URLPATHS_RECOVERY=/gotrue/verify
      - GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE=/gotrue/verify
      - GOTRUE_MAILER_TEMPLATES_MAGIC_LINK=${GOTRUE_MAILER_TEMPLATES_MAGIC_LINK}
      - GOTRUE_SMTP_ADMIN_EMAIL=${GOTRUE_SMTP_ADMIN_EMAIL}
      - GOTRUE_SMTP_MAX_FREQUENCY=${GOTRUE_SMTP_MAX_FREQUENCY}
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.appflowy-gotrue.rule=Host(`${APPFLOWY_DOMAIN}`) && PathPrefix(`/gotrue`)"
      - "traefik.http.routers.appflowy-gotrue.entrypoints=websecure"
      - "traefik.http.routers.appflowy-gotrue.tls.certresolver=cloudflare"
      - "traefik.http.routers.appflowy-gotrue.middlewares=appflowy-strip-gotrue@docker"
      - "traefik.http.services.appflowy-gotrue.loadbalancer.server.port=9999"
      - "traefik.http.middlewares.appflowy-strip-gotrue.stripprefix.prefixes=/gotrue"

  appflowy-cloud:
    image: appflowyinc/appflowy_cloud:${APPFLOWY_CLOUD_VERSION:-latest}
    container_name: appflowy-cloud
    restart: unless-stopped
    depends_on:
      appflowy-gotrue:
        condition: service_healthy
      appflowy-postgres:
        condition: service_healthy
      appflowy-redis:
        condition: service_started
      appflowy-minio:
        condition: service_started
    environment:
      - RUST_LOG=info
      - APPFLOWY_ENVIRONMENT=production
      - APPFLOWY_DATABASE_URL=${APPFLOWY_DATABASE_URL}
      - APPFLOWY_REDIS_URI=${APPFLOWY_REDIS_URI}
      - APPFLOWY_GOTRUE_JWT_SECRET=${GOTRUE_JWT_SECRET}
      - APPFLOWY_GOTRUE_JWT_EXP=${GOTRUE_JWT_EXP}
      - APPFLOWY_GOTRUE_BASE_URL=${APPFLOWY_PUBLIC_GOTRUE_URL}
      - APPFLOWY_S3_CREATE_BUCKET=${APPFLOWY_S3_CREATE_BUCKET}
      - APPFLOWY_S3_USE_MINIO=${APPFLOWY_S3_USE_MINIO}
      - APPFLOWY_S3_MINIO_URL=${APPFLOWY_S3_MINIO_URL}
      - APPFLOWY_S3_ACCESS_KEY=${APPFLOWY_S3_ACCESS_KEY}
      - APPFLOWY_S3_SECRET_KEY=${APPFLOWY_S3_SECRET_KEY}
      - APPFLOWY_S3_BUCKET=${APPFLOWY_S3_BUCKET}
      - APPFLOWY_S3_REGION=${APPFLOWY_S3_REGION}
      - APPFLOWY_S3_PRESIGNED_URL_ENDPOINT=${APPFLOWY_S3_PRESIGNED_URL_ENDPOINT}
      - APPFLOWY_MAILER_SMTP_HOST=${APPFLOWY_MAILER_SMTP_HOST}
      - APPFLOWY_MAILER_SMTP_PORT=${APPFLOWY_MAILER_SMTP_PORT}
      - APPFLOWY_MAILER_SMTP_USERNAME=${APPFLOWY_MAILER_SMTP_USERNAME}
      - APPFLOWY_MAILER_SMTP_EMAIL=${APPFLOWY_MAILER_SMTP_EMAIL}
      - APPFLOWY_MAILER_SMTP_PASSWORD=${APPFLOWY_MAILER_SMTP_PASSWORD}
      - APPFLOWY_MAILER_SMTP_TLS_KIND=${APPFLOWY_MAILER_SMTP_TLS_KIND}
      - APPFLOWY_ACCESS_CONTROL=${APPFLOWY_ACCESS_CONTROL}
      - APPFLOWY_DATABASE_MAX_CONNECTIONS=${APPFLOWY_DATABASE_MAX_CONNECTIONS}
      - APPFLOWY_WEB_URL=${APPFLOWY_PUBLIC_BASE_URL}
      - APPFLOWY_BASE_URL=${APPFLOWY_PUBLIC_BASE_URL}
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.appflowy-api.rule=Host(`${APPFLOWY_DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.appflowy-api.entrypoints=websecure"
      - "traefik.http.routers.appflowy-api.tls.certresolver=cloudflare"
      - "traefik.http.routers.appflowy-api.service=appflowy-cloud"
      - "traefik.http.routers.appflowy-ws.rule=Host(`${APPFLOWY_DOMAIN}`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.appflowy-ws.entrypoints=websecure"
      - "traefik.http.routers.appflowy-ws.tls.certresolver=cloudflare"
      - "traefik.http.routers.appflowy-ws.service=appflowy-cloud"
      - "traefik.http.services.appflowy-cloud.loadbalancer.server.port=8000"

  appflowy-worker:
    image: appflowyinc/appflowy_worker:${APPFLOWY_WORKER_VERSION:-latest}
    container_name: appflowy-worker
    restart: unless-stopped
    depends_on:
      appflowy-postgres:
        condition: service_healthy
      appflowy-redis:
        condition: service_started
    environment:
      - RUST_LOG=info
      - APPFLOWY_ENVIRONMENT=production
      - APPFLOWY_WORKER_REDIS_URL=${APPFLOWY_WORKER_REDIS_URL}
      - APPFLOWY_WORKER_DATABASE_URL=${APPFLOWY_WORKER_DATABASE_URL}
      - APPFLOWY_WORKER_DATABASE_NAME=${APPFLOWY_WORKER_DATABASE_NAME}
      - APPFLOWY_WORKER_IMPORT_TICK_INTERVAL=30
      - APPFLOWY_S3_USE_MINIO=${APPFLOWY_S3_USE_MINIO}
      - APPFLOWY_S3_MINIO_URL=${APPFLOWY_S3_MINIO_URL}
      - APPFLOWY_S3_ACCESS_KEY=${APPFLOWY_S3_ACCESS_KEY}
      - APPFLOWY_S3_SECRET_KEY=${APPFLOWY_S3_SECRET_KEY}
      - APPFLOWY_S3_BUCKET=${APPFLOWY_S3_BUCKET}
      - APPFLOWY_S3_REGION=${APPFLOWY_S3_REGION}
      - APPFLOWY_MAILER_SMTP_HOST=${APPFLOWY_MAILER_SMTP_HOST}
      - APPFLOWY_MAILER_SMTP_PORT=${APPFLOWY_MAILER_SMTP_PORT}
      - APPFLOWY_MAILER_SMTP_USERNAME=${APPFLOWY_MAILER_SMTP_USERNAME}
      - APPFLOWY_MAILER_SMTP_EMAIL=${APPFLOWY_MAILER_SMTP_EMAIL}
      - APPFLOWY_MAILER_SMTP_PASSWORD=${APPFLOWY_MAILER_SMTP_PASSWORD}
      - APPFLOWY_MAILER_SMTP_TLS_KIND=${APPFLOWY_MAILER_SMTP_TLS_KIND}
    networks:
      - homelab

  appflowy-web:
    image: appflowyinc/appflowy_web:${APPFLOWY_WEB_VERSION:-latest}
    container_name: appflowy-web
    restart: unless-stopped
    depends_on:
      - appflowy-cloud
    environment:
      - APPFLOWY_BASE_URL=${APPFLOWY_PUBLIC_BASE_URL}
      - APPFLOWY_GOTRUE_BASE_URL=${APPFLOWY_PUBLIC_GOTRUE_URL}
      - APPFLOWY_WS_BASE_URL=${APPFLOWY_PUBLIC_WS_URL}
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.appflowy-web.rule=Host(`${APPFLOWY_DOMAIN}`)"
      - "traefik.http.routers.appflowy-web.entrypoints=websecure"
      - "traefik.http.routers.appflowy-web.tls.certresolver=cloudflare"
      - "traefik.http.services.appflowy-web.loadbalancer.server.port=80"

  appflowy-admin:
    image: appflowyinc/admin_frontend:${APPFLOWY_ADMIN_FRONTEND_VERSION:-latest}
    container_name: appflowy-admin
    restart: unless-stopped
    depends_on:
      appflowy-gotrue:
        condition: service_healthy
      appflowy-cloud:
        condition: service_started
    environment:
      - APPFLOWY_BASE_URL=${APPFLOWY_PUBLIC_BASE_URL}
      - APPFLOWY_GOTRUE_BASE_URL=${APPFLOWY_PUBLIC_GOTRUE_URL}
      - ADMIN_FRONTEND_PATH_PREFIX=${ADMIN_FRONTEND_PATH_PREFIX}
      - ADMIN_FRONTEND_GOTRUE_URL=http://appflowy-gotrue:9999
      - ADMIN_FRONTEND_APPFLOWY_CLOUD_URL=http://appflowy-cloud:8000
      - ADMIN_FRONTEND_REDIS_URL=redis://appflowy-redis:6379
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.appflowy-admin.rule=Host(`${APPFLOWY_DOMAIN}`) && PathPrefix(`/console`)"
      - "traefik.http.routers.appflowy-admin.entrypoints=websecure"
      - "traefik.http.routers.appflowy-admin.tls.certresolver=cloudflare"
      - "traefik.http.services.appflowy-admin.loadbalancer.server.port=3000"

  # ----------------------------
  # UTILITIES
  # ----------------------------

  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - "8191:8191"
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy


    # portal to access all other web UI
  homepage:
    container_name: homepage
    restart: unless-stopped
    image: ghcr.io/gethomepage/homepage:latest
    volumes:
      - ./config/homepage:/app/config
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - HOMEPAGE_ALLOWED_HOSTS=homepage.antoineglacet.com
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.homepage.rule=Host(`home.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.homepage.entrypoints=websecure"
      - "traefik.http.routers.homepage.tls.certresolver=cloudflare"
      - "traefik.http.routers.homepage.middlewares=authelia@docker"
      - "traefik.http.services.homepage.loadbalancer.server.port=3000"

  # refresh dynamic IP to cloudflare DNS
  ddclient:
    image: lscr.io/linuxserver/ddclient:latest
    container_name: ddclient
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DDCLIENT_CLOUDFLARE_TOKEN=${DDCLIENT_CLOUDFLARE_TOKEN}
    volumes:
      - ./config/ddclient:/config
    restart: unless-stopped
    networks:
      - homelab
  # ----------------------------
  # NETWORK & ADMIN SERVICES
  # ----------------------------

  # SMB file sharing for Windows clients
  samba:
    container_name: samba
    image: dperson/samba
    volumes:
      - ${DATA}:/data
    environment:
      - USERID=${PUID}
      - GROUPID=${PGID}
      - TZ=${TZ}
    ports:
      - "137:137/udp"
      - "138:138/udp"
      - "139:139/tcp"
      - "445:445/tcp"
    command: >
      samba.sh
        -w "WORKGROUP"
        -s "data;/data;yes;no;no;all"
        -u "${SAMBA_USER};${SAMBA_PASSWORD}"
        -p
        -n
    restart: unless-stopped

  # Ad-blocking DNS server
  adguard:
    container_name: adguard
    image: adguard/adguardhome
    volumes:
      - ./config/adguard/work:/opt/adguardhome/work
      - ./config/adguard/conf:/opt/adguardhome/conf
      - ${CERT}:/cert
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 67:67/udp
      - 853:853/tcp
    depends_on:
      - traefik
      - traefik-certs-dumper
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.adguard.rule=Host(`adguard.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.adguard.entrypoints=websecure"
      - "traefik.http.routers.adguard.tls.certresolver=cloudflare"
      - "traefik.http.routers.adguard.middlewares=authelia@docker"
      - "traefik.http.services.adguard.loadbalancer.server.port=80"

  # Contaiers management UI
  portainer-ce:
    container_name: portainer
    image: portainer/portainer-ce
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/portainer:/data
    ports:
      - 8000:8000 # Agent
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=cloudflare"
      - "traefik.http.routers.portainer.middlewares=authelia@docker"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  # ----------------------------
  # BACKUP & RECOVERY
  # ----------------------------
  duplicati:
    image: lscr.io/linuxserver/duplicati:latest
    container_name: duplicati
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./config/duplicati:/config
      - ${BACKUP}:/backups
      - ${HOMESERVER}:/source
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.duplicati.rule=Host(`duplicati.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.duplicati.entrypoints=websecure"
      - "traefik.http.routers.duplicati.tls.certresolver=cloudflare"
      - "traefik.http.routers.duplicati.middlewares=authelia@docker"
      - "traefik.http.services.duplicati.loadbalancer.server.port=8200"

  # ----------------------------
  # INGRESS & SECURITY
  # ----------------------------

  # Reverse proxy, dashboard & certificates
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=homelab_proxy
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entryPoint.permanent=true
      - --entrypoints.websecure.address=:443

      # 👇 Tell Traefik to request one cert for root + wildcard on websecure
      - --entrypoints.websecure.http.tls.domains[0].main=antoineglacet.com
      - --entrypoints.websecure.http.tls.domains[0].sans=*.antoineglacet.com

      # ACME (DNS-01 via Cloudflare)
      - --certificatesresolvers.cloudflare.acme.email=${TRAEFIK_ACME_EMAIL}
      - --certificatesresolvers.cloudflare.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnschallenge.delaybeforecheck=10
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --log.level=DEBUG
    environment:
      - CLOUDFLARE_DNS_API_TOKEN=${TRAEFIK_CLOUDFLARE_TOKEN}
      - TRAEFIK_DOMAIN=${TRAEFIK_DOMAIN}
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik/letsencrypt:/letsencrypt
    extra_hosts:
      - "home-assistant:host-gateway"
      - "plex:host-gateway"
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=cloudflare"
      - "traefik.http.routers.traefik.middlewares=authelia@docker"
      - "traefik.http.routers.traefik.service=api@internal"

  traefik-certs-dumper:
    image: ldez/traefik-certs-dumper:v2.9.1
    container_name: traefik-certs-dumper
    command:
      - file
      - --source
      - /letsencrypt/acme.json
      - --dest
      - /output
      - --domain-subdir=true
      - --watch
    restart: unless-stopped
    depends_on:
      - traefik
    volumes:
      - ./config/traefik/letsencrypt:/letsencrypt
      - ./config/traefik/certs:/output

  # Authentication
  authelia:
    image: ghcr.io/authelia/authelia:latest
    container_name: authelia
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - AUTHELIA_JWT_SECRET=${AUTHELIA_JWT_SECRET}
      - AUTHELIA_SESSION_SECRET=${AUTHELIA_SESSION_SECRET}
      - AUTHELIA_STORAGE_ENCRYPTION_KEY=${AUTHELIA_STORAGE_ENCRYPTION_KEY}
      - AUTHELIA_SMTP_PASSWORD=${AUTHELIA_SMTP_PASSWORD}
    volumes:
      - ./config/authelia:/config
    restart: unless-stopped
    networks:
      - homelab
      - homelab_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=homelab_proxy"
      - "traefik.http.routers.authelia.rule=Host(`auth.${TRAEFIK_DOMAIN}`)"
      - "traefik.http.routers.authelia.entrypoints=websecure"
      - "traefik.http.routers.authelia.tls.certresolver=cloudflare"
      - "traefik.http.services.authelia.loadbalancer.server.port=9091"
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://auth.${TRAEFIK_DOMAIN}/"
      - "traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email"

  # Restart containers based on health
  autoheal:
    image: willfarrell/autoheal
    container_name: autoheal
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      # docker socket, be careful with this
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
